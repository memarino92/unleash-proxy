"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const unleash_client_1 = require("unleash-client");
const config_1 = require("../config");
test('should require "unleashUrl', () => {
    const t = () => config_1.createProxyConfig({});
    expect(t).toThrow(TypeError);
    expect(t).toThrow('You must specify the unleashUrl option (UNLEASH_URL)');
});
test('should require "unleashApiToken', () => {
    const t = () => config_1.createProxyConfig({ unleashUrl: 'some' });
    expect(t).toThrow(TypeError);
    expect(t).toThrow('You must specify the unleashApiToken option (UNLEASH_API_TOKEN)');
});
test('should be valid options', () => {
    const config = config_1.createProxyConfig({
        unleashUrl: 'some',
        unleashApiToken: 'some',
        proxySecrets: ['s1'],
    });
    expect(config.unleashUrl).toBe('some');
});
test('should set trust proxy', () => {
    const config = config_1.createProxyConfig({
        unleashUrl: 'some',
        unleashApiToken: 'some',
        proxySecrets: ['s1'],
        trustProxy: true,
    });
    expect(config.trustProxy).toBe(true);
});
test('should set instanceId', () => {
    const config = config_1.createProxyConfig({
        unleashUrl: 'some',
        unleashApiToken: 'some',
        unleashInstanceId: 'someId1',
        proxySecrets: ['s1'],
    });
    expect(config.unleashInstanceId).toBe('someId1');
});
test('should generate instanceId', () => {
    const config = config_1.createProxyConfig({
        unleashUrl: 'some',
        unleashApiToken: 'some',
        proxySecrets: ['s1'],
    });
    expect(config.unleashInstanceId).toBeDefined();
    expect(config.unleashInstanceId.length).toBeGreaterThan(3);
});
test('should set trust proxy to "loopback"', () => {
    const config = config_1.createProxyConfig({
        unleashUrl: 'some',
        unleashApiToken: 'some',
        proxySecrets: ['s1'],
        trustProxy: 'loopback',
    });
    expect(config.trustProxy).toBe('loopback');
});
test('should set trust proxy via env var', () => {
    process.env.TRUST_PROXY = 'true';
    const config = config_1.createProxyConfig({
        unleashUrl: 'some',
        unleashApiToken: 'some',
        proxySecrets: ['s1'],
    });
    expect(config.trustProxy).toBe(true);
    delete process.env.TRUST_PROXY;
});
test('should allow options via env', () => {
    process.env.UNLEASH_URL = 'some';
    process.env.UNLEASH_API_TOKEN = 'token';
    process.env.UNLEASH_PROXY_SECRETS = 's1';
    process.env.UNLEASH_INSTANCE_ID = 'i1';
    const config = config_1.createProxyConfig({});
    expect(config.unleashUrl).toBe('some');
    expect(config.unleashApiToken).toBe('token');
    expect(config.proxySecrets.length).toBe(1);
    expect(config.proxySecrets[0]).toBe('s1');
    expect(config.unleashInstanceId).toBe('i1');
    // cleanup
    delete process.env.UNLEASH_URL;
    delete process.env.UNLEASH_API_TOKEN;
    delete process.env.UNLEASH_PROXY_SECRETS;
});
test('should load custom activation strategy', () => {
    class TestStrat extends unleash_client_1.Strategy {
        constructor() {
            super('TestStrat');
        }
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        isEnabled(parameters, context) {
            return true;
        }
    }
    const config = config_1.createProxyConfig({
        unleashUrl: 'some',
        unleashApiToken: 'some',
        proxySecrets: ['s1'],
        customStrategies: [new TestStrat()],
    });
    expect(config.customStrategies?.length).toBe(1);
    if (config.customStrategies) {
        expect(config.customStrategies[0].name).toBe('TestStrat');
    }
    else {
        throw new Error('Expected custom strategy to be set!');
    }
});
test('should load custom activation strategy from file', () => {
    const base = path.resolve('');
    process.env.UNLEASH_CUSTOM_STRATEGIES_FILE = `${base}/src/examples/custom-strategies.js`;
    const config = config_1.createProxyConfig({
        unleashUrl: 'some',
        unleashApiToken: 'some',
        proxySecrets: ['s1'],
    });
    expect(config.customStrategies?.length).toBe(1);
    if (config.customStrategies) {
        expect(config.customStrategies[0].name).toBe('FromFile');
    }
    else {
        throw new Error('Expected custom strategy to be set!');
    }
    delete process.env.UNLEASH_CUSTOM_STRATEGIES_FILE;
});
test('should set namePrefix via options', () => {
    const config = config_1.createProxyConfig({
        unleashUrl: 'some',
        unleashApiToken: 'some',
        namePrefix: 'somePrefix',
        proxySecrets: ['s1'],
    });
    expect(config.namePrefix).toBe('somePrefix');
});
test('should set namePrefix via env', () => {
    process.env.UNLEASH_NAME_PREFIX = 'prefixViaEnv';
    const config = config_1.createProxyConfig({
        unleashUrl: 'some',
        unleashApiToken: 'some',
        proxySecrets: ['s1'],
    });
    expect(config.namePrefix).toBe('prefixViaEnv');
    delete process.env.UNLEASH_CUSTOM_STRATEGIES_FILE;
});
test('should not set tags', () => {
    const config = config_1.createProxyConfig({
        unleashUrl: 'some',
        unleashApiToken: 'some',
        proxySecrets: ['s1'],
    });
    expect(config.tags).toBeUndefined();
});
test('should set tags via opts', () => {
    const config = config_1.createProxyConfig({
        unleashUrl: 'some',
        unleashApiToken: 'some',
        proxySecrets: ['s1'],
        tags: [{ name: 'simple', value: 'proxy' }],
    });
    expect(config.tags).toStrictEqual([{ name: 'simple', value: 'proxy' }]);
});
test('should not set tags with empty env var', () => {
    process.env.UNLEASH_TAGS = '';
    const config = config_1.createProxyConfig({
        unleashUrl: 'some',
        unleashApiToken: 'some',
        proxySecrets: ['s1'],
    });
    expect(config.tags).toBeUndefined();
    delete process.env.UNLEASH_CUSTOM_STRATEGIES_FILE;
});
test('should set tags with env var', () => {
    process.env.UNLEASH_TAGS = 'simple:proxy, demo:test';
    const config = config_1.createProxyConfig({
        unleashUrl: 'some',
        unleashApiToken: 'some',
        proxySecrets: ['s1'],
    });
    expect(config.tags).toStrictEqual([
        { name: 'simple', value: 'proxy' },
        { name: 'demo', value: 'test' },
    ]);
    delete process.env.UNLEASH_CUSTOM_STRATEGIES_FILE;
});
//# sourceMappingURL=config.test.js.map