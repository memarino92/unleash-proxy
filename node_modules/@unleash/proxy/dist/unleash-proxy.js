"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const create_context_1 = require("./create-context");
const metrics_schema_1 = require("./metrics-schema");
const NOT_READY = 'Unleash Proxy has not connected to Unleash API and is not ready to accept requests yet.';
class UnleashProxy {
    constructor(client, config) {
        this.ready = false;
        this.logger = config.logger;
        this.proxySecrets = config.proxySecrets;
        this.client = client;
        if (client.isReady()) {
            this.setReady();
        }
        this.client.on('ready', () => {
            this.setReady();
        });
        const router = express_1.Router();
        this.middleware = router;
        // Routes
        router.get('/health', this.health.bind(this));
        router.get('/', this.getEnabledToggles.bind(this));
        router.post('/', this.lookupToggles.bind(this));
        router.post('/client/metrics', this.registerMetrics.bind(this));
    }
    setReady() {
        this.ready = true;
        this.logger.info('Successfully synchronized with Unleash API. Proxy is now ready to receive traffic.');
    }
    setProxySecrets(proxySecrets) {
        this.proxySecrets = proxySecrets;
    }
    getEnabledToggles(req, res) {
        const apiToken = req.header('authorization');
        if (!this.ready) {
            res.status(503).send(NOT_READY);
        }
        else if (!apiToken || !this.proxySecrets.includes(apiToken)) {
            res.sendStatus(401);
        }
        else {
            const { query } = req;
            query.remoteAddress = query.remoteAddress || req.ip;
            const context = create_context_1.createContext(query);
            const toggles = this.client.getEnabledToggles(context);
            res.set('Cache-control', 'public, max-age=2');
            res.send({ toggles });
        }
    }
    lookupToggles(req, res) {
        const apiToken = req.header('authorization');
        if (!this.ready) {
            res.status(503).send(NOT_READY);
        }
        else if (!apiToken || !this.proxySecrets.includes(apiToken)) {
            res.sendStatus(401);
        }
        else {
            const { context, toggles: toggleNames } = req.body;
            const toggles = this.client.getDefinedToggles(toggleNames, context);
            res.send(toggles);
        }
    }
    health(req, res) {
        if (!this.ready) {
            res.status(503).send(NOT_READY);
        }
        else {
            res.send('ok');
        }
    }
    registerMetrics(req, res) {
        const data = req.body;
        const { error, value } = metrics_schema_1.clientMetricsSchema.validate(data);
        if (error) {
            this.logger.warn('Invalid metrics posted', error);
            res.status(400).json(error);
            return;
        }
        this.client.registerMetrics(value);
        res.sendStatus(200);
    }
}
exports.default = UnleashProxy;
//# sourceMappingURL=unleash-proxy.js.map