"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProxyConfig = void 0;
const logger_1 = require("./logger");
const util_1 = require("./util");
function resolveStringToArray(value) {
    if (value) {
        return value.split(/,\s*/);
    }
    return undefined;
}
function safeNumber(envVar, defaultVal) {
    if (envVar) {
        try {
            return Number.parseInt(envVar, 10);
        }
        catch (err) {
            return defaultVal;
        }
    }
    else {
        return defaultVal;
    }
}
function loadCustomStrategies(path) {
    if (path) {
        // eslint-disable-next-line
        const strategies = require(path);
        return strategies;
    }
    return undefined;
}
function loadTrustProxy(value = 'FALSE') {
    const upperValue = value.toUpperCase();
    if (upperValue === 'FALSE') {
        return false;
    }
    if (upperValue === 'TRUE') {
        return true;
    }
    return value;
}
function mapTagsToFilters(tags) {
    return resolveStringToArray(tags)?.map((tag) => {
        const [name, value] = tag.split(':');
        return { name, value };
    });
}
function createProxyConfig(option) {
    const unleashUrl = option.unleashUrl || process.env.UNLEASH_URL;
    if (!unleashUrl) {
        throw new TypeError('You must specify the unleashUrl option (UNLEASH_URL)');
    }
    const unleashApiToken = option.unleashApiToken || process.env.UNLEASH_API_TOKEN;
    if (!unleashApiToken) {
        throw new TypeError('You must specify the unleashApiToken option (UNLEASH_API_TOKEN)');
    }
    const customStrategies = option.customStrategies ||
        loadCustomStrategies(process.env.UNLEASH_CUSTOM_STRATEGIES_FILE);
    const proxySecrets = option.proxySecrets ||
        resolveStringToArray(process.env.UNLEASH_PROXY_SECRETS);
    if (!proxySecrets) {
        throw new TypeError('You must specify the unleashProxySecrets option (UNLEASH_PROXY_SECRETS)');
    }
    const logLevel = option.logLevel || process.env.LOG_LEVEL;
    const trustProxy = option.trustProxy || loadTrustProxy(process.env.TRUST_PROXY);
    const tags = option.tags || mapTagsToFilters(process.env.UNLEASH_TAGS);
    const unleashInstanceId = option.unleashInstanceId ||
        process.env.UNLEASH_INSTANCE_ID ||
        util_1.generateInstanceId();
    return {
        unleashUrl,
        unleashApiToken,
        unleashAppName: option.unleashAppName ||
            process.env.UNLEASH_APP_NAME ||
            'unleash-proxy',
        unleashInstanceId,
        customStrategies,
        proxySecrets,
        proxyBasePath: option.proxyBasePath || process.env.PROXY_BASE_PATH || '',
        refreshInterval: option.refreshInterval ||
            safeNumber(process.env.UNLEASH_FETCH_INTERVAL, 5000),
        metricsInterval: option.metricsInterval ||
            safeNumber(process.env.UNLEASH_METRICS_INTERVAL, 30000),
        environment: option.environment || process.env.UNLEASH_ENVIRONMENT,
        projectName: option.projectName || process.env.UNLEASH_PROJECT_NAME,
        namePrefix: option.namePrefix || process.env.UNLEASH_NAME_PREFIX,
        disableMetrics: false,
        logger: option.logger || new logger_1.SimpleLogger(logLevel),
        trustProxy,
        tags,
    };
}
exports.createProxyConfig = createProxyConfig;
//# sourceMappingURL=config.js.map